# No semicolons

x
if (a) {
  var b = c
  d
} else
  e

==>

ExpressionStatement(Variable),
IfStatement(Keyword, Variable, Block(
  VariableDeclaration(Keyword, Definition, Operator, Variable),
  ExpressionStatement(Variable)), Keyword, ExpressionStatement(Variable))

# Continued expressions on new line

x
+ 2
foo
(bar)

==>

ExpressionStatement(BinaryExpression(Variable, Operator, Number)),
ExpressionStatement(CallExpression(Variable, ArgList(Variable)))

# Doesn't parse postfix ops on a new line

x
++y

==>

ExpressionStatement(Variable),
ExpressionStatement(UnaryExpression(Operator, Variable))

# Eagerly cut return/break/continue

return 2
return
2
continue foo
continue
foo
break bar
break
bar

==>

ReturnStatement(Keyword, Number),
ReturnStatement(Keyword),
ExpressionStatement(Number),
ContinueStatement(Keyword, Label),
ContinueStatement(Keyword),
ExpressionStatement(Variable),
BreakStatement(Keyword, Label),
BreakStatement(Keyword),
ExpressionStatement(Variable)

# Cut return regardless of whitespace

{ return }

return // foo
;

==>

Block(ReturnStatement(Keyword)), ReturnStatement(Keyword, LineComment)
