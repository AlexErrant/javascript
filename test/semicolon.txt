# No semicolons

x
if (a) {
  var b = c
  d
} else
  e

==>

expression.s(variable.n),
if.c(if.k, parenthesized.e(variable.n), block.s(
  variable.d(var.k, variable.d, operator.n, variable.n),
  expression.s(variable.n)), else.k, expression.s(variable.n))

# Continued expressions on new line

x
+ 2
foo
(bar)

==>

expression.s(binary.o(variable.n, operator.n, number.l)),
expression.s(call.e(variable.n, argument.l(variable.n)))

# Doesn't parse postfix ops on a new line

x
++y

==>

expression.s(variable.n),
expression.s(unary.p(operator.n, variable.n))

# Eagerly cut return/break/continue

return 2
return
2
continue foo
continue
foo
break bar
break
bar

==>

return.s(return.k, number.l),
return.s(return.k),
expression.s(number.l),
continue.s(continue.k, label.n),
continue.s(continue.k),
expression.s(variable.n),
break.s(break.k, label.n),
break.s(break.k),
expression.s(variable.n)

# Cut return regardless of whitespace

{ return }

return // foo
;

==>

block.s(return.s(return.k)), return.s(return.k, line.c)
