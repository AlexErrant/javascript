# Strings

"A string with \"double\" and 'single' quotes";
'A string with "double" and \'single\' quotes';
'\\';
"\\";

'A string with new \
line';

==>

String, String, String, String, String

# Numbers

101;
3.14;
3.14e+1;
0x1ABCDEFabcdef;
0o7632157312;
0b1010101001;
1e+3;

==> Number, Number, Number, Number, Number, Number, Number

# Identifiers

theVar;
theVar2;
$_;
é象𫝄;

==> Variable, Variable, Variable, Variable

# RegExps

/one\\/;
/one/g;
/one/i;
/one/gim;
/on\/e/gim;
/on[^/]afe/gim;
/[\]/]/;

==> RegExp, RegExp, RegExp, RegExp, RegExp, RegExp, RegExp

# Calls

f(new foo.bar(1), 2);

==> CallExpression(Variable, ArgList(NewExpression(Keyword, MemberExpression(Variable, Property), ArgList(Number)), Number))

# Arrays

[];
[ "item1" ];
[ "item1", ];
[ "item1", item2 ];
[ , item2 ];
[ item2 = 5 ];

==>

ArrayExpression,
ArrayExpression(String),
ArrayExpression(String),
ArrayExpression(String, Variable),
ArrayExpression(Variable),
ArrayExpression(AssignmentExpression(Variable, Operator, Number))

# Functions

[
  function() {},
  function(arg1, ...arg2) {
    arg2;
  },
  function stuff() {},
  function trailing(a,) {},
  function trailing(a,b,) {}
]

==>

ArrayExpression(
  FunctionExpression(Keyword, ParamList, Block),
  FunctionExpression(Keyword, ParamList(Definition, Definition), Block(Variable)),
  FunctionExpression(Keyword, Definition, ParamList, Block),
  FunctionExpression(Keyword, Definition, ParamList(Definition), Block),
  FunctionExpression(Keyword, Definition, ParamList(Definition, Definition), Block))

# Arrow functions

a => 1;
() => 2;
(d, e) => 3;
(f, g,) => {
  return h;
};
async () => 4;

==>

ArrowFunction(ParamList(Definition), Number),
ArrowFunction(ParamList, Number),
ArrowFunction(ParamList(Definition, Definition), Number,
ArrowFunction(ParamList(Definition, Definition), Block(ReturnStatement(Variable)),
ArrowFunction(Keyword, ParamList, Number)
