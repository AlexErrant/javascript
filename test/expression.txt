# Strings

"A string with \"double\" and 'single' quotes";
'A string with "double" and \'single\' quotes';
'\\';
"\\";

'A string with new \
line';

==>

String, String, String, String, String

# Numbers

101;
3.14;
3.14e+1;
0x1ABCDEFabcdef;
0o7632157312;
0b1010101001;
1e+3;

==> Number, Number, Number, Number, Number, Number, Number

# Identifiers

theVar;
theVar2;
$_;
é象𫝄;

==> Variable, Variable, Variable, Variable

# RegExps

/one\\/;
/one/g;
/one/i;
/one/gim;
/on\/e/gim;
/on[^/]afe/gim;
/[\]/]/;

==> RegExp, RegExp, RegExp, RegExp, RegExp, RegExp, RegExp

# Calls

f(new foo.bar(1), 2);

==> CallExpression(Variable, ArgList(NewExpression(Keyword, MemberExpression(Variable, PropertyName), ArgList(Number)), Number))

# Arrays

[];
[ "item1" ];
[ "item1", ];
[ "item1", item2 ];
[ , item2 ];
[ item2 = 5 ];

==>

ArrayExpression,
ArrayExpression(String),
ArrayExpression(String),
ArrayExpression(String, Variable),
ArrayExpression(Variable),
ArrayExpression(AssignmentExpression(Variable, Operator, Number))

# Functions

[
  function() {},
  function(arg1, ...arg2) {
    arg2;
  },
  function stuff() {},
  function trailing(a,) {},
  function trailing(a,b,) {}
]

==>

ArrayExpression(
  FunctionExpression(Keyword, ParamList, Block),
  FunctionExpression(Keyword, ParamList(Definition, Definition), Block(Variable)),
  FunctionExpression(Keyword, Definition, ParamList, Block),
  FunctionExpression(Keyword, Definition, ParamList(Definition), Block),
  FunctionExpression(Keyword, Definition, ParamList(Definition, Definition), Block))

# Arrow functions

a => 1;
() => 2;
(d, e) => 3;
(f, g,) => {
  return h;
};
async () => 4;

==>

ArrowFunction(ParamList(Definition), Number),
ArrowFunction(ParamList, Number),
ArrowFunction(ParamList(Definition, Definition), Number),
ArrowFunction(ParamList(Definition, Definition), Block(ReturnStatement(Keyword, Variable))),
ArrowFunction(Keyword, ParamList, Number)

# Ternary operator

condition ? case1 : case2;

x.y = some.condition ? 2**x : 1 - 2;

==>

ConditionalExpression(Variable, Operator, Variable, Operator, Variable),

AssignmentExpression(
  MemberExpression(Variable, PropertyName), Operator,
  ConditionalExpression(MemberExpression(Variable, PropertyName),
    Operator, BinaryExpression(Number, Operator, Variable),
    Operator, BinaryExpression(Number, Operator, Number)))

# Type operators

typeof x;
x instanceof String;

==>

PrefixExpression(Keyword, Variable),
BinaryExpression(Variable, Keyword, Variable)

# Delete

delete thing['prop'];
true ? delete thing.prop : null;

==>

PrefixExpression(Keyword, MemberExpression(Variable, String)),
ConditionalExpression(Boolean, Operator, PrefixExpression(Keyword, MemberExpression(Variable, PropertyName)), Operator, Null)

# Void

a = void b();

==> AssignmentExpression(Variable, Operator, PrefixExpression(Keyword, CallExpression(Variable, ArgList)))

# Augmented assignment

s |= 1;
t %= 2;
w ^= 3;
x += 4;
y.z *= 5;
z += 1;
a >>= 1;
b >>>= 1;
c <<= 1;

==>

AssignmentExpression(Variable, Operator, Number),
AssignmentExpression(Variable, Operator, Number),
AssignmentExpression(Variable, Operator, Number),
AssignmentExpression(Variable, Operator, Number),
AssignmentExpression(MemberExpression(Variable, PropertyName), Operator, Number),
AssignmentExpression(Variable, Operator, Number),
AssignmentExpression(Variable, Operator, Number),
AssignmentExpression(Variable, Operator, Number),
AssignmentExpression(Variable, Operator, Number)

# Operator precedence

a <= b && c >= d;
a.b = c ? d : e;
a && b(c) && d;
a && new b(c) && d;
typeof a == b && c instanceof d;

==>

BinaryExpression(BinaryExpression(Variable, Operator, Variable), Operator, BinaryExpression(Variable, Operator, Variable)),
AssignmentExpression(MemberExpression(Variable, PropertyName), Operator, ConditionalExpression(Variable, Operator, Variable, Operator, Variable)),
BinaryExpression(BinaryExpression(Variable, Operator, CallExpression(Variable, ArgList(Variable))), Operator, Variable),
BinaryExpression(BinaryExpression(Variable, Operator, NewExpression(Keyword, Variable, ArgList(Variable))), Operator, Variable),
BinaryExpression(BinaryExpression(PrefixExpression(Keyword, Variable), Operator, Variable), Operator, BinaryExpression(Variable, Keyword, Variable))

# Rest args

foo(...rest);

==>

CallExpression(Variable, ArgList(Variable))

# Forward slashes after parenthesized expressions

(foo - bar) / baz;
if (foo - bar) /baz/;
(this.a() / this.b() - 1) / 2;

==>

BinaryExpression(BinaryExpression(Variable, Operator, Variable), Operator, Variable),
IfStatement(Keyword, BinaryExpression(Variable, Operator, Variable), RegExp),
BinaryExpression(
  BinaryExpression(BinaryExpression(CallExpression(MemberExpression(This, PropertyName), ArgList), Operator,
                                    CallExpression(MemberExpression(This, PropertyName), ArgList)),
                   Operator, Number),
  Operator, Number)

# Yield expressions

yield db.users.where('[endpoint+email]');

==> PrefixExpression(Keyword, CallExpression(MemberExpression(MemberExpression(Variable, PropertyName), PropertyName), ArgList(String)))

# Template strings

`one line`;
`multi
  line`;

`multi
  ${2 + 2}
  hello
  ${1, 2}
  line`;

`$$$$`;
`$`;
`$$$$${ async }`;

`\\`;

`one${`two${`three`}`}`;

f`hi${there}`;

==>

TemplateString(Template),
TemplateString(Template),
TemplateString(Template, BinaryExpression(Number, Operator, Number), Template, SequenceExpression(Number, Number), Template),
TemplateString(Template),
TemplateString(Template),
TemplateString(Template, Variable, Template),
TemplateString(Template),
TemplateString(Template, TemplateString(Template, TemplateString(Template), Template), Template),
TaggedTemplateExpression(Variable, TemplateString(Template, Variable, Template))

# Atoms

this;
null;
undefined;
true;
false;

==> This, Null, Variable, Boolean, Boolean

# Objects

foo({},
    { a: "b" },
    { c: "d", "e": f, 1: 2 },
    {
      g,
      [methodName]() {}
    },
    {b, get},
    {a,});

==>

CallExpression(Variable, ArgList(
  ObjectExpression,
  ObjectExpression(Property(PropertyName, String)),
  ObjectExpression(Property(PropertyName, String), Property(String, Variable), Property(Number, Number)),
  ObjectExpression(Property(PropertyName), Property(Variable, ParamList, Block)),
  ObjectExpression(Property(PropertyName), Property(PropertyName)),
  ObjectExpression(Property(PropertyName))))

# Method definitions

({
  foo: true,

  add(a, b) {
    return a + b;
  },

  get bar() { return c; },

  set bar(a) { c = a; },

  *barGenerator() { yield c; },

  get() { return 1; }
});

==>

ObjectExpression(
  Property(PropertyName, Boolean),
  Property(PropertyName, ParamList(Definition, Definition), Block(ReturnStatement(Keyword, BinaryExpression(Variable, Operator, Variable)))),
  Property(Keyword, PropertyName, ParamList, Block(ReturnStatement(Keyword, Variable))),
  Property(Keyword, PropertyName, ParamList(Definition), Block(AssignmentExpression(Variable, Operator, Variable))),
  Property(PropertyName, ParamList, Block(PrefixExpression(Keyword, Variable))),
  Property(PropertyName, ParamList, Block(ReturnStatement(Keyword, Number))))

# Keyword property names

({
  finally() {},
  catch() {},
  get: function () {},
  set() {},
  static: true,
  async: true,
});

==>

ObjectExpression(
  Property(PropertyName, ParamList, Block),
  Property(PropertyName, ParamList, Block),
  Property(PropertyName, FunctionExpression(Keyword, ParamList, Block)),
  Property(PropertyName, ParamList, Block),
  Property(PropertyName, Boolean),
  Property(PropertyName, Boolean))

# Generator functions

[
  function *() {},
  function *generateStuff(arg1, arg2) {
    yield;
    yield arg2;
  }
];

==>

ArrayExpression(
  FunctionExpression(Keyword, ParamList, Block),
  FunctionExpression(Keyword, Definition, ParamList(Definition, Definition), Block(Variable, PrefixExpression(Keyword, Variable))))
