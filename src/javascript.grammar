precedence {
  else left,
  member,
  newArgs,
  call,
  taggedTemplate,
  prefix,
  postfix,
  typeof,
  exp left,
  times left,
  plus left,
  shift left,
  loop,
  rel left,
  equal left,
  bitOr left,
  bitXor left,
  bitAnd left,
  and left,
  or left,
  ternary left,
  assign left,
  comma left,
  statement cut
}

top { statement+ }

statement {
  ExportDeclaration |
  ImportDeclaration |
  tag.ForStatement<kw<"for"> ckw<"await">? (ForSpec | ForInSpec | ForOfSpec) statement> |
  tag.WhileStatement<kw<"while"> ParenthesizedExpression statement> |
  tag.WithStatement<kw<"with"> ParenthesizedExpression statement> |
  tag.DoWhileStatement<kw<"do"> statement kw<"while"> ParenthesizedExpression semi> |
  tag.IfStatement<kw<"if"> ParenthesizedExpression statement (!else kw<"else"> statement)?> |
  tag.SwitchStatement<kw<"switch"> ParenthesizedExpression tag.Block<"{" switchItem* "}">> |
  tag.TryStatement<kw<"try"> Block (kw<"catch"> ("(" pattern ")")? Block)? (kw<"finally"> Block)?> |
  tag.ReturnStatement<kw<"return"> (noSemi expression)? semi> |
  tag.ThrowStatement<kw<"throw"> expression semi> |
  tag.BreakStatement<kw<"break"> (noSemi Label)? semi> |
  tag.ContinueStatement<kw<"continue"> (noSemi Label)? semi> |
  tag.DebuggerStatement<kw<"debugger"> semi> |
  Block |
  LabeledStatement |
  declaration |
  tag.ExpressionStatement<expression semi> |
  ";"
}

ExportDeclaration {
  kw<"export"> Star ckw<"from"> String semi |
  kw<"export"> kw<"default"> (FunctionDeclaration | ClassDeclaration | expression semi) |
  kw<"export"> declaration |
  kw<"export"> ExportGroup (ckw<"from"> String)? semi
}

ExportGroup {
  "{" commaSep<Variable (ckw<"as"> tag.Variable<word>)?> "}"
}

ImportDeclaration {
  kw<"import"> (Star ckw<"as"> tag.Definition<word> | commaSep<Definition | ImportGroup>) ckw<"from"> String semi |
  kw<"import"> String semi
}

ImportGroup {
  "{" commaSep<Definition | Variable ckw<"as"> tag.Definition<word>> "}"
}

LabeledStatement {
  Label ":" statement
}

ForSpec {
  "("
  (VariableDeclaration | expression ";" | ";") expression? ";" expression?
  ")"
}

forXSpec<op> {
  "("
  ((kw<"let"> | kw<"var"> | kw<"const">) pattern | Variable | MemberExpression | ArrayPattern | ObjectPattern)
  !loop op expression
  ")"
}

ForInSpec { forXSpec<kwOp<"in">> }
ForOfSpec { forXSpec<kw<"of">> }

declaration {
  FunctionDeclaration | ClassDeclaration | VariableDeclaration
}

FunctionDeclaration {
  ckw<"async">? !statement kw<"function"> Star? Definition? ParamList Block
}

ClassDeclaration {
  !statement kw<"class"> Definition (kw<"extends"> expression)? ClassBody
}

ClassBody {
  "{" (MethodDefinition | ";")* "}"
}

MethodDefinition {
  pkw<"static">?
  pkw<"async">?
  (pkw<"get"> | pkw<"set"> | Star)?
  PropertyName
  ParamList
  Block
}

VariableDeclaration {
  (kw<"let"> | kw<"var"> | kw<"const">) commaSep1<patternAssign> semi
}

pattern { Definition | ArrayPattern | ObjectPattern }

ArrayPattern { "[" commaSep<"..." patternAssign | patternAssign> ~destructure "]" }

ObjectPattern { "{" commaSep<patternProperty> ~destructure "}" }

patternAssign {
  pattern (op<"="> expressionNoComma)?
}

ParamList {
  "(" commaSep<"..." patternAssign | patternAssign> ")"
}

Block {
  !statement "{" statement* "}"
}

switchItem {
  tag.SwitchCase<kw<"case"> expression ":"> |
  tag.SwitchDefault<kw<"default"> ":"> |
  statement
}

expression {
  expressionNoComma | SequenceExpression
}

SequenceExpression {
  expressionNoComma !comma ("," expressionNoComma)+
}

expressionNoComma {
  Number |
  String |
  TemplateString |
  Variable |
  boolean |
  this |
  null |
  super |
  RegExp |
  ArrayExpression |
  tag.ObjectExpression<"{" commaSep<Property> ~destructure "}"> |
  NewExpression |
  UnaryExpression |
  ParenthesizedExpression |
  ClassExpression |
  FunctionExpression |
  ArrowFunction |
  MemberExpression |
  BinaryExpression |
  tag.ConditionalExpression<expressionNoComma !ternary op<"?"> expressionNoComma tag.Operator<":"> expressionNoComma> |
  AssignmentExpression |
  tag.UnaryExpression<expressionNoComma !postfix postfixOp> |
  tag.CallExpression<expressionNoComma !call ArgList> |
  tag.TaggedTemplateExpression<expressionNoComma !taggedTemplate TemplateString>
}

ParenthesizedExpression { "(" expression ")" }

ArrayExpression {
  "[" commaSep1<expressionNoComma | ""> ~destructure "]"
}

propName { PropertyName | "[" expression "]" | Number | String }

Property {
  pkw<"async">? (pkw<"get"> | pkw<"set"> | Star)? propName ParamList Block |
  propName ~destructure (":" expressionNoComma)? |
  "..." expressionNoComma
}

patternProperty=Property {
  "..." patternAssign |
  (PropertyName | Number | String) ~destructure (":" pattern)? (op<"="> expressionNoComma)?
}

ClassExpression {
  kw<"class"> Definition? (kw<"extends"> expression)? ClassBody
}

FunctionExpression {
  kw<"function"> Star? Definition? ParamList Block
}

NewExpression {
  kw<"new"> expressionNoComma (!newArgs ArgList)?
}

UnaryExpression {
  !prefix (ckw<"await"> | ckw<"yield"> | kwOp<"void"> | kwOp<"typeof"> | kwOp<"delete"> | op<"!"> | op<"~"> | op<"++" | "--"> | op<"+" | "-">)
  expressionNoComma
}

BinaryExpression {
  expressionNoComma !exp op<"**"> expressionNoComma |
  expressionNoComma !times (divide | op<"%"> | tag.Operator<"*">) expressionNoComma |
  expressionNoComma !plus op<"+" | "-"> expressionNoComma |
  expressionNoComma !shift op<">>" ">"? | "<<"> expressionNoComma |
  expressionNoComma !rel (op<"<" "="? | ">" "="?> | kwOp<"in"> | kwOp<"instanceof">) expressionNoComma |
  expressionNoComma !equal op<"==" "="? | "!=" "="?> expressionNoComma |
  expressionNoComma !bitOr op<"|"> expressionNoComma |
  expressionNoComma !bitXor op<"^"> expressionNoComma |
  expressionNoComma !bitAnd op<"&"> expressionNoComma |
  expressionNoComma !and op<"&&"> expressionNoComma |
  expressionNoComma !or op<"||"> expressionNoComma
}

AssignmentExpression {
  (Variable | MemberExpression) !assign op<([+\-/|&%^] | "*" "*"? | "<<" | ">>" ">"?) "="> expressionNoComma |
  (Variable | MemberExpression | ArrayPattern | ObjectPattern) !assign op<"="> expressionNoComma
}

MemberExpression {
  expressionNoComma !member ("." PropertyName | "[" expression "]")
}

ArgList {
  "(" commaSep<"..."? expressionNoComma> ")"
}

ArrowFunction {
  ckw<"async">? (tag.ParamList<Definition> | ParamList) "=>" (Block | expression)
}

skip {} {
  TemplateString {
    templateStart (templateContent | templateExpr)* templateEnd
  }
}

templateExpr { templateDollarBrace expression "}" }

commaSep<content> {
  "" | content ("," content?)*
}

commaSep1<content> {
  content ("," content)*
}

kw<term> { specialize<identifier, term, Keyword> }

kwOp<term> { specialize<identifier, term, OperatorKeyword> }

// Contextual keywords
ckw<term> { extend<identifier, term, Keyword> }

// Contextual keyword in property context
pkw<term> { extend<word, term, Keyword> }

semi { ";" | insertSemi }

boolean { specialize<identifier, "true", Boolean> | specialize<identifier, "false", Boolean> }

this { specialize<identifier, "this", This> }

null { specialize<identifier, "null", Null> }

super { specialize<identifier, "super", Super> }

Star { "*" }

Variable { identifier ~arrow }

Definition { identifier ~arrow }

Label { identifier }

PropertyName { word }

skip { whitespace | LineComment | BlockComment }

external tokens noSemicolon from "./tokens" { noSemi }

external tokens postfix from "./tokens" { postfixOp=Operator }

tokens {
  whitespace { std.whitespace+ }

  LineComment { "//" [^\n]* }

  BlockComment { "/*" blockCommentRest }

  blockCommentRest { [^*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | [^/*] blockCommentRest }

  divide=Operator { "/" }

  precedence { BlockComment, LineComment, divide }

  precedence { BlockComment, LineComment, RegExp }

  identifierChar { std.asciiLetter | [_$\u{a1}-\u{10ffff}] }

  word { identifierChar (identifierChar | std.digit)* }

  identifier { word }

  precedence { identifier, whitespace }

  precedence { word, whitespace }

  Number {
    (std.digit+ ("." std.digit*)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+)? |
    "0x" (std.digit | [a-fA-F])+ |
    "0b" [01]+ |
    "0o" [0-7]+
  }

  String {
    '"' ([^\\\n"] | "\\" _)* '"'? |
    "'" ([^\\\n'] | "\\" _)* "'"?
  }

  templateStart=Template { "`" }

  op<expr>=Operator { expr }

  RegExp { "/" ([^/\\\n[] | "\\" [^\n] | "[" ([^\n\\\]] | "\\" [^\n])* "]")+ ("/" [gimsuy]*)? }
}

external tokens insertSemicolon from "./tokens" { insertSemi }

external tokens template from "./tokens" {
  templateContent=Template,
  templateDollarBrace,
  templateEnd=Template
}
