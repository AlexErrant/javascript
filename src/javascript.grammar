prec {
 statement,
 else left,
 member,
 prefix,
 newArgs,
 call,
 suffix,
 typeof,
 exp left,
 times left,
 plus left,
 and left,
 or left,
 ternary,
 assign left,
 comma
}

program { statement+ }

statement {
  ExportStatement |
  ImportStatement |
  IfStatement |
  ForStatement |
  WhileStatement |
  DoWhileStatement |
  declaration |
  expression ";" |
  ";"
}

ExportStatement {
  kw<"export"> plainStar kw<"from"> String ";" |
  kw<"export"> kw<"default"> expression ";" |
  kw<"export"> declaration ";" |
  kw<"export"> ExportGroup (kw<"from"> String)? ";"
}

ExportGroup {
  "{" (Identifier (kw<"as"> Identifier)?)* "}"
}

ImportStatement {
  kw<"import"> (plainStar kw<"as"> Identifier | Identifier | ImportGroup) kw<"from"> String ";"
  kw<"import"> String ";"
}

ImportGroup {
  "{" (Identifier (kw<"as"> Identifier)?)* "}"
}

declaration {
  FunctionDeclaration | ClassDeclaration | VariableDeclaration
}

FunctionDeclaration {
  !statement kw<"function"> Identifier plainStar? ParamList Block
}

ClassDeclaration {
  !statement kw<"class"> Identifier (kw<"extends"> expression)? ClassBody
}

ClassBody {
  "{" ClassItem* "}"
}

ClassItem {
  Identifier // FIXME
}

VariableDeclaration {
  (kw<"let"> | kw<"var"> | kw<"const">) commaSep1<patternAssign> ";"
}

pattern {
  Identifier | ArrayPattern | ObjectPattern
}

patternAssign {
  pattern (op<"="> expressionNoComma)?
}

ObjectPattern {
  "{" commaSep<"..."? Property (":" pattern)? (op<"="> expressionNoComma)?> "}"
}

ArrayPattern {
  "[" commaSep<"..."? patternAssign> "]"
}

ParamList {
  "(" commaSep<"..."? patternAssign> ")"
}

IfStatement {
  kw<"if"> parenExpression statement !else (kw<"else"> statement)?
}

parenExpression {
  "(" expression ")"
}

ForStatement { // FIXME
  kw<"for"> "(" statement expression? ";" expression? ")" statement
}

WhileStatement {
  kw<"while"> parenExpression statement
}

DoWhileStatement {
  kw<"do"> statement kw<"while"> parenExpression ";"
}

Block {
  "{" statement* "}"
}

expression {
  expressionNoComma ("," expressionNoComma)*
}

expressionInner {
  Number |
  String |
  Identifier |
  RegExp |
  ArrayExpression |
  NewExpression |
  PrefixExpression |
  "(" expression ")" |
  ClassExpression |
  FunctionExpression
}

expressionNoComma {
  expressionInner |
  MemberExpression<expressionNoComma> |
  BinaryExpression |
  AssignmentExpression |
  SuffixExpression |
  CallExpression 
}

ArrayExpression {
  "[" commaSep<expressionNoComma> "]"
}

ClassExpression {
  kw<"class"> (kw<"extends"> expression)? ClassBody |
  kw<"class"> Identifier (kw<"extends"> expression)? ClassBody
}

FunctionExpression {
  kw<"function"> plainStar? ParamList Block |
  kw<"function"> Identifier plainStar? ParamList Block
}

NewExpression {
  kw<"new"> (expressionInner | MemberExpression<expressionInner>) !newArgs ArgList?
}

PrefixExpression {
  !prefix (kw<"void"> | kw<"typeof"> | op<"!"> | op<"++" | "--"> | op<"+" | "-">) expressionNoComma
}

BinaryExpression {
  expressionNoComma !plus op<"+" | "-"> expressionNoComma |
  expressionNoComma !times op<"*" | "/"> expressionNoComma |
  expressionNoComma !and op<"&&"> expressionNoComma |
  expressionNoComma !or op<"||"> expressionNoComma
  // FIXME
}

AssignmentExpression {
  expressionNoComma !assign (op<([+\-/|&%^] | "*" "*"? | "<<" | ">>" ">"?) "="> | op<"=">) expressionNoComma
}

CallExpression {
  expressionNoComma !call ArgList
}

MemberExpression<inner> {
  inner !member ("." Property | "[" expression "]")
}

SuffixExpression {
  expressionNoComma !suffix op<"++" | "--">
}

ArgList {
  "(" commaSep<"..."? expressionNoComma> ")"
}

commaSep<content> {
  content? ("," content?)*
}

commaSep1<content> {
  content? ("," content)*
}

kw<word> { specialize<identifier, word, Keyword> }

Property { identifier }

Identifier { identifier }

tokens {
  skip { std.whitespace+ | LineComment | BlockComment }

  LineComment { "//" [^\n]* }

  BlockComment { "/*" ([^*] | "*" [^/])* "*/" }

  identifierChar { std.asciiLetter | [_$\u{a1}-\u{10ffff}] }

  identifier { identifierChar (identifierChar | std.digit)* }

  Number {
    (std.digit+ ("." std.digit*)? | "." std.digit+) (("e" | "E") ("+" | "-")? std.digit+)? |
    "0x" (std.digit | [a-fA-F])+ |
    "0b" [01]+ |
    "0o" [0-7]+
  }

  String {
    '"' ([^\\\n"] | "\\" _)* '"'? |
    "'" ([^\\\n'] | "\\" _)* "'"?
  }

  op<expr>=Operator { expr }

  group {
    RegExp { "/" ([^/\\\n[] | "\\" [^\n] | "[" ([^\n\]] | "\\" [^\n])* "]")+ ("/" [gimsuy]*)? }
  }

  group {
    plainStar { "*" }
  }
}
